[Introduction]

    A tool such as 'diff' can easily detect changes between 2 files. This 
    can be used to quickly find typos in later revisions. This saves the 
    programmer time!
    
    There should be ONE commit for ONE logical change.

    git can make finding and correcting bugs fast and easy without knowing 
    the code base.
  
----------------------------------------------------------------------------
[Reflect] 
  How could having easy access to the entire history of a file make you a 
  more efficient programmer in the long term?

[Response] 
  It enables the programmer to see the project's evolution. It reveals the
  design problems that come into play. Thus, allowing the programmer to take
  greater care from the start of another project.

----------------------------------------------------------------------------
[Reflect] 
  What do you think are the pros and cons of manually choosing when to 
  create a  commit, like you do in Git, vs having versions automatically 
  saved, like Google docs does?

[Response] 
  Manual commits allows revision history to be more manageable because each
  commit should (if done properly) reflect one logical change. The downside 
  is the potential for human error such as forgetting to commit. Automatic
  saving counters this, but creates many more revisions which makes it less
  manageable.
  
----------------------------------------------------------------------------
[Reflect] 
  Why do you think some version control systems, like Git, allow saving 
  multiple files in one commit, while others, like Google Docs, treat each
  file separately?

[Response] 
  Git is designed for code. Source files may depend on other files to 
  function properly so it makes sense to save all such files in one commit.
  Google Docs isn't designed strictly with code in mind. 

----------------------------------------------------------------------------
[Reflect] 
  How can you use the commands git log and git diff to view the history of 
  files?
  
[Response]
  git log can be used to show entire history. git diff can be used to 
  compare two revisions, checking for differences.
  
----------------------------------------------------------------------------
[Reflect] 
  How might using version control make you more confident to make changes 
  that could break something?

[Response]
  Version control saves previous working versions so the possibility to go 
  back is always present. Additionally, git diff can make it easier to see 
  how a bug was introduced in a later revision.
  
----------------------------------------------------------------------------
[Reflect] 
  Now that you have your workspace set up, what do you want to try using Git
  for?

[Response]
  I want to use Git to become a better programmer. I want to be able to 
  quickly find bugs, and have a development history of each of my projects.
  
----------------------------------------------------------------------------
[Commands]

  git log               List the commits and show which files have changed
  git diff id1 id2      Compare two commits
  git clone             Create a local copy/clone from the repository
  git checkout          Shows a previous version of the file. This is not a
                          checkout to edit like in SVN or TFS!
